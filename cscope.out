cscope 15 $HOME/github/transit               0000009965
	@curl_ftp.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<cuæ.h
>

5 
	~"cuæ_·p.h
"

6 
	~"å™sô.h
"

8 
	$gë_fûe_size
(
FILE
 *
fûe
)

10 
size
 = 0;

11 
	`f£ek
(
fûe
, 0L, 
SEEK_END
);

12 
size
 = 
	`·ñl
(
fûe
);

13 
	`f£ek
(
fûe
, 0L, 
SEEK_SET
);

14  
size
;

15 
	}
}

17 
CURL
 *
	$cuæ_öô
()

19 
	`cuæ_globÆ_öô
(
CURL_GLOBAL_DEFAULT
);

20 
CURL
 *
cuæ
 = 
	`cuæ_ósy_öô
();

21 if(
NULL
 =
cuæ
) {

22 
	`Ârötf
(
°dîr
, "Init curl failed.\n");

23 
	`exô
(1);

25  
cuæ
;

26 
	}
}

28 
	$cuæ_£t_u∂ﬂd_›t
(
CURL
 *
cuæ
,

29 c⁄° *
uæ
,

30 c⁄° *
u£r_key
,

31 
FILE
 *
fûe
)

33 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_URL
, 
uæ
);

34 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_USERPWD
, 
u£r_key
);

35 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_READDATA
, 
fûe
);

36 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_UPLOAD
, 1);

37 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_INFILESIZE
, 
	`gë_fûe_size
(
fûe
));

38 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_FTP_CREATE_MISSING_DIRS
, 1);

40 i‡(
å≠p
.
debug
)

41 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_VERBOSE
, 1);

42 
	}
}

44 
	$cuæ_£t_dow∆ﬂd_›t
(
CURL
 *
cuæ
,

45 c⁄° *
uæ
,

46 c⁄° *
u£r_key
,

47 
FILE
 *
fûe
)

49 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_URL
, 
uæ
);

50 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_USERPWD
, 
u£r_key
);

51 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_WRITEDATA
, 
fûe
);

53 i‡(
å≠p
.
debug
)

54 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_VERBOSE
, 1);

55 
	}
}

57 
	$cuæ_exô
(
CURL
 *
cuæ
)

59 
	`cuæ_ósy_˛ónup
(
cuæ
);

60 
	`cuæ_globÆ_˛ónup
();

61 
	}
}

63 
CURLcode
 
	$cuæ_≥rf‹m
(
CURL
 *
cuæ
)

65 
CURLcode
 
ªt
 = 
	`cuæ_ósy_≥rf‹m
(
cuæ
);

66 if(
ªt
 != 0) {

67 
	`Ârötf
(
°dîr
, "Perform curl failed.\n");

68 
	`cuæ_exô
(
cuæ
);

69 
	`exô
(1);

71  
ªt
;

72 
	}
}

74 
FTP_STATE
 
	$·p_u∂ﬂd
(c⁄° 
FTP_OPT
 
·p_›ti⁄
)

76 
FTP_STATE
 
°©e
;

77 
CURL
 *
cuæ
;

78 
FILE
 *
Â
 = 
	`f›í
(
·p_›ti⁄
.
fûe
, "r");

79 if(
NULL
 =
Â
) {

80 
	`Ârötf
(
°dîr
, "O≥¿fûê%†Áûedáà%s:%d\n", 
·p_›ti⁄
.
fûe
,

81 
__FILE__
, 
__LINE__
);

82  
FTP_UPLOAD_FAILED
;

85 
cuæ
 = 
	`cuæ_öô
();

86 
	`cuæ_£t_u∂ﬂd_›t
(
cuæ
, 
·p_›ti⁄
.
uæ
, fç_›ti⁄.
u£r_key
, 
Â
);

87 if(
CURLE_OK
 =
	`cuæ_≥rf‹m
(
cuæ
))

88 
°©e
 = 
FTP_UPLOAD_SUCCESS
;

90 
°©e
 = 
FTP_UPLOAD_FAILED
;

92 
	`cuæ_exô
(
cuæ
);

93 
	`f˛o£
(
Â
);

94  
°©e
;

95 
	}
}

97 
FTP_STATE
 
	$·p_dow∆ﬂd
(c⁄° 
FTP_OPT
 
·p_›ti⁄
)

99 
FTP_STATE
 
°©e
;

100 
CURL
 *
cuæ
;

101 
FILE
 *
Â
 = 
	`f›í
(
·p_›ti⁄
.
fûe
, "w");

102 if(
NULL
 =
Â
) {

103 
	`Ârötf
(
°dîr
, "O≥¿fûêÁûedáà%s:%d\n", 
__FILE__
, 
__LINE__
);

104  
FTP_UPLOAD_FAILED
;

107 
cuæ
 = 
	`cuæ_öô
();

108 
	`cuæ_£t_dow∆ﬂd_›t
(
cuæ
, 
·p_›ti⁄
.
uæ
, fç_›ti⁄.
u£r_key
, 
Â
);

109 if(
CURLE_OK
 =
	`cuæ_≥rf‹m
(
cuæ
))

110 
°©e
 = 
FTP_DOWNLOAD_SUCCESS
;

112 
°©e
 = 
FTP_DOWNLOAD_FAILED
;

114 
	`cuæ_exô
(
cuæ
);

115 
	`f˛o£
(
Â
);

116  
°©e
;

117 
	}
}

	@curl_ftp.h

1 #i‚de‡
_CURL_FTP_H


2 
	#_CURL_FTP_H


	)

5 
	eFTP_STATE
 {

6 
	mFTP_UPLOAD_SUCCESS
,

7 
	mFTP_UPLOAD_FAILED
,

8 
	mFTP_DOWNLOAD_SUCCESS
,

9 
	mFTP_DOWNLOAD_FAILED
,

10 }
	tFTP_STATE
;

12 
	sFTP_OPT
 {

13 
	muæ
[512];

14 *
	mu£r_key
;

15 *
	mfûe
;

16 }
	tFTP_OPT
;

19 
FTP_STATE
 
·p_u∂ﬂd
(c⁄° 
FTP_OPT
 
·p_›ti⁄
);

22 
FTP_STATE
 
·p_dow∆ﬂd
(c⁄° 
FTP_OPT
 
·p_›ti⁄
);

	@skeleton_daemon.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sig«l.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<sy¶og.h
>

16 
	$skñë⁄_d´m⁄
()

18 
pid_t
 
pid
;

21 
pid
 = 
	`f‹k
();

24 i‡(
pid
 < 0)

25 
	`exô
(
EXIT_FAILURE
);

28 i‡(
pid
 > 0)

29 
	`exô
(
EXIT_SUCCESS
);

32 i‡(
	`£tsid
() < 0)

33 
	`exô
(
EXIT_FAILURE
);

37 
	`sig«l
(
SIGCHLD
, 
SIG_IGN
);

38 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

41 
pid
 = 
	`f‹k
();

44 i‡(
pid
 < 0)

45 
	`exô
(
EXIT_FAILURE
);

48 i‡(
pid
 > 0)

49 
	`exô
(
EXIT_SUCCESS
);

52 
	`umask
(0);

56 
	`chdú
("/");

59 
x
;

60 
x
 = 
	`sysc⁄f
(
_SC_OPEN_MAX
); x>0; x--)

62 
	`˛o£
 (
x
);

65 
	}
}

	@transit.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<°d¨g.h
>

15 
	~"å™sô.h
"

20 
å_≠p
 
	gå≠p
 = {0};

25 
	#APP
 "å™sô"

	)

26 
	#APP_PORT
 6666

	)

31 
	glog_¥i‹ôy
;

32 
	$å_log
(
Àvñ
, c⁄° *
fmt
, ...)

34 i‡(!
å≠p
.
debug
)

37 
va_li°
 
li°
;

38 
	`va_°¨t
(
li°
, 
fmt
);

39 i‡(
å≠p
.
isd´m⁄
)

40 
	`vsy¶og
(
log_¥i‹ôy
 | 
Àvñ
, 
fmt
, 
li°
);

42 
	`v¥ötf
(
fmt
, 
li°
);

43 
	`va_íd
(
li°
);

44 
	}
}

49 
	$·p_›t_cfg
(
FTP_OPT
 *
·p_›t
,

50 *
·p£rvî
,

51 *
u§Pwd
,

52 *
dú
,

53 *
fûíame
)

55 i‡(!
·p_›t
)

57 
	`•rötf
(
·p_›t
->
uæ
, "%s%s%s%s", "·p://", 
·p£rvî
, 
dú
, 
fûíame
);

58 
	`å_log
(
LOG_INFO
, "uæ: %s\n", 
·p_›t
->
uæ
);

60 i‡(!
u§Pwd
)

61 
·p_›t
->
u£r_key
 = "anonymous:anonymous";

63 
·p_›t
->
u£r_key
 = 
u§Pwd
;

64 
·p_›t
->
fûe
 = 
fûíame
;

65 
	}
}

67 
	$rcv_cb
(
evutû_sockë_t
 
fd
, 
wh©
, *
¨g
)

70 
	}
}

75 
	$maö
(
¨gc
, **
¨gv
)

78 
c
;

79 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h:u:d:x")) != -1) {

80 
c
) {

82 
å≠p
.
u§_key
 = 
›èrg
;

83 
	`¥ötf
("u£∏key: %†\n", 
å≠p
.
u§_key
);

86 
å≠p
.
isd´m⁄
 = 1;

87 
	`skñë⁄_d´m⁄
();

90 
å≠p
.
·p_uæ
 = 
›èrg
;

91 
	`¥ötf
("·p£rvî: %†\n", 
å≠p
.
·p_uæ
);

94 
å≠p
.
debug
 = 1;

97 
	`¥ötf
("Usage:Åransit \n");

98 
	`¥ötf
("\t -h: ftpserver's ip or hostname\n");

99 
	`¥ötf
("\t -u: ftpserver's userÇameándÖassword, 'root:123456'\n");

100 
	`¥ötf
("\t -d:Ñun in daemon\n");

101 
	`¥ötf
("\t -x:ÉnableÜog\n");

102 
	`exô
(1);

106 
	`›ílog
(
APP
, 
LOG_PID
, 
LOG_DAEMON
);

108 
	`udp£rvî_öô
(&
å≠p
.
sock
, 
APP_PORT
);

109 
å≠p
.
ev_udp
 = 
	`evít_√w
—øµ.
ba£
,Åøµ.
sock
, 
EV_PERSIST
 | 
EV_READ
,

110 
ªcv_cb
, 
NULL
);

111 
	`evít_add
(
å≠p
.
ev_udp
, 
NULL
);

122 
å≠p
.
ba£
 = 
	`evít_ba£_√w
();

124 if(!
å≠p
.
ba£
) {

125 
	`å_log
(
LOG_INFO
, "event_base_new Failed, Exiting");

130 
	`evít_ba£_di•©ch
(
å≠p
.
ba£
);

132 
	}
}

	@transit.h

1 #i‚de‡
_TRANSIT_H


2 
	#_TRANSIT_H


	)

4 
	~<°rög.h
>

5 
	~<sy¶og.h
>

6 
	~<sys/sockë.h
>

8 
	~"evít.h
"

9 
	~"cuæ_·p.h
"

11 
skñë⁄_d´m⁄
();

12 
å_≠p
 
å≠p
;

13 
å_log
(
Àvñ
, c⁄° *
fmt
, ...);

15 
	så_≠p
 {

16 
evít_ba£
 *
	mba£
;

17 
evít
 
	mev_udp
;

18 
	msock
;

19 
	mdebug
;

20 
	misd´m⁄
;

21 *
	mu§_key
;

22 *
	m·p_uæ
;

25 
	så_„©uª_cﬁÀ˘i⁄
 {

26 
	mN01_mac
[17];

27 
	mN02_ty≥
[4];

28 
	mN03_°¨t_time
[20];

29 
	mN04_íd_time
[20];

30 
	mN05_powî
[8];

31 
	mN06_bssid
[17];

32 
	mN07_essid
[256];

33 
	mN08_hi°‹y_essid
[1024];

34 
	mN09_modñ
[128];

35 
	mN10_os_vîsi⁄
[50];

36 
	mN11_imei
[20];

37 
	mN12_imsi
[20];

38 
	mN13_°©i⁄
[20];

39 
	mN14_xpoöt
[30];

40 
	mN15_ypoöt
[30];

41 
	mN16_ph⁄e
[20];

42 
	mN17_devmac
[17];

43 
	mN18_devi˚num
[21];

44 
	mN19_£rvi˚code
[14];

45 
	mN20_¥Ÿocﬁ_ty≥
[14];

46 
	mN21_accou¡
[64];

47 
	mN22_Êag
[2];

48 
	mN23_uæ
[1024];

49 
	mN24_com∑ny
[32];

50 
	mN25_≠_ch™√l
[2];

51 
	mN26_≠_í¸yty≥
[2];

52 
	mN27_c⁄su…_xpoöt
[8];

53 
	mN28_c⁄su…_ypoöt
[8];

54 } 
__©åibuã__
((
∑cked
));

56 
	så_£rvi˚_öfo
 {

57 
	mN01_£rvi˚_code
[14];

58 
	mN02_£rvi˚_«me
[256];

59 
	mN03_addªss
[256];

60 
	mN04_zù
[6];

61 
	mN05_busöess_«tuª
[1];

62 
	mN06_¥öcùÆ
[50];

63 
	mN07_¥öcùÆ_ãl
[20];

64 
	mN08_öfo_m™
[50];

65 
	mN09_öfo_m™_ãl
[20];

66 
	mN10_öfo_m™_emaû
[50];

67 
	mN11_¥odu˚r_code
[6];

68 
	mN12_°©us
[4];

69 
	mN13_ídög_numbî
[4];

70 
	mN14_£rvî_numbî
[4];

71 
	mN15_exô_ù
[128];

72 
	mN16_auth_accou¡
[64];

73 
	mN17_√t_ty≥
[2];

74 
	mN18_¥a˘ôi⁄î_numbî
[3];

75 
	mN19_√t_m⁄ô‹_dï¨tmít
[20];

76 
	mN20_√t_m⁄ô‹_m™
[50];

77 
	mN21_√t_m⁄ô‹_m™_ãl
[30];

78 
	mN22_ªm¨k
[256];

79 
	mN23_£rvi˚_ty≥
[4];

80 
	mN24_¥ovö˚_code
[6];

81 
	mN25_côy_code
[6];

82 
	mN26_¨ó_code
[6];

83 
	mN27_côy_ty≥
[6];

84 
	mN28_pﬁi˚_code
[8];

85 
	mN29_maû_accou¡
[50];

86 
	mN30_mobûe_accou¡
[50];

87 
	mN31_xpoöt
[20];

88 
	mN32_ypoöt
[20];

89 
	mN33_gis_xpoöt
[20];

90 
	mN34_gis_ypoöt
[20];

91 
	mN35_ãrmöÆ_Á˘‹y_‹gcode
[9];

92 
	mN36_‹g_code
[9];

93 
	mN37_ù_ty≥
[2];

94 
	mN38_b™d_width
[11];

95 
	mN39_√t_œn
[11];

96 
	mN40_√t_œn_ãrm1«l
[11];

97 
	mN41_is_SAFE
[2];

98 
	mN42_wifi_ãrmöÆ
[11];

99 
	mN43_¥öcùÆ_˚π_ty≥
[7];

100 
	mN44_¥öcùÆ_˚π_code
[50];

101 
	mN45_≥rs⁄_«me
[50];

102 
	mN46_≥rs⁄_ãl
[20];

103 
	mN47_≥rs⁄_qq
[20];

104 
	mN48_öf‹_m™_qq
[20];

105 
	mN49_°¨t_time
[5];

106 
	mN50_íd_time
[5];

107 
	mN51_¸óã_time
[20];

108 
	mN52_ˇp_ty≥
[2];

109 } 
__©åibuã__
((
∑cked
));

111 
	så_equùmít_öfo
 {

112 
	mN01_equùmít_num
[21];

113 
	mN02_equùmít_«me
[128];

114 
	mN03_mac
[17];

115 
	mN04_ù
[11];

116 
	mN05_£curôy_Á˘‹y_‹gcode
[9];

117 
	mN06_víd‹_«me
[255];

118 
	mN07_vîd‹_num
[255];

119 
	mN08_£rvi˚_code
[6];

120 
	mN09_¥ovö˚_code
[6];

121 
	mN10_côy_code
[6];

122 
	mN11_¨ó_code
[6];

123 
	mN12_ö°Æl_d©e
[16];

124 
	mN13_ö°Æl_poöt
[255];

125 
	mN14_equùmít_ty≥
[2];

126 
	mN15_l⁄gôude
[10];

127 
	mN16_œtôude
[10];

128 
	mN17_subway_°©i⁄
[128];

129 
	mN18_subway_löe_öfo
[256];

130 
	mN19_subway_vehi˛e_öfo
[256];

131 
	mN20_subway_com∑πmít_num
[256];

132 
	mN21_ˇr_code
[64];

133 
	mN22_u∂ﬂd_time_öãrvÆ
[11];

134 
	mN23_cﬁÀ˘i⁄_ødius
[4];

135 
	mN24_¸óã_time
[16];

136 
	mN25_¸óãr
[50];

137 
	mN26_œ°_c⁄√˘_time
[16];

138 
	mN27_ªm¨k
[255];

139 
	mN28_wda_vîsi⁄
[20];

140 
	mN29_fúew¨e_vîsi⁄
[50];

141 } 
__©åibuã__
((
∑cked
));

	@udpserver.c

1 
	~"å™sô.h
"

3 
	$udp£rvî_öô
(*
sock
, 
p‹t
)

5 *
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

6 if(*
sock
 < 0) {

7 
	`å_log
(
LOG_ERR
, "cannot open udp socket!");

10 
sockaddr_ö
 
£rvîaddr
;

11 
	`mem£t
(&
£rvîaddr
, 0, (serveraddr));

12 
£rvîaddr
.
sö_Ámûy
 = 
AF_INET
;

13 
£rvîaddr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

14 
£rvîaddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

16 i‡(
	`böd
(*
sock
, (
sockaddr
*)&
£rvîaddr
, (serveraddr)) < 0) {

17 
	`å_log
(
LOG_ERR
, "cannot open udp socket!");

19 
	}
}

	@
1
.
0
6
72
curl_ftp.c
curl_ftp.h
skeleton_daemon.c
transit.c
transit.h
udpserver.c
